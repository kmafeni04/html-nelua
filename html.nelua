require "string"

require "libs.inline_map"

--- ### html module
---`
local html = @record{}
---`

local chars_to_escape: hashmap(string, string) 
chars_to_escape["&"] = "&amp;"
chars_to_escape["<"] = "&lt;"
chars_to_escape[">"] = "&gt;"
chars_to_escape['"'] = "&quot;"
chars_to_escape["'"] = "&#039;"

--- ### html.escape
--- Used to escape a string that will be appended to the [Ctx](#htmlctx) buffer
---`
function html.escape(s: string): string
---`
  s = s:gsub([=[[&<>"']]=], chars_to_escape)
  return s
end

--- ### html.raw
--- Used to format a string so that when appended to the [Ctx](#htmlctx) buffer, it will not be escaped
---`
function html.raw(s: string): string
---`
  assert(s ~= "", "Param `s` can not be an empty string")
  return "__raw__:" .. s
end

--- ### html.Ctx
--- This record provides the functions for generating the html
---`
local html.Ctx = @record{
  buf: stringbuilder,
}
---`

##[[
--- ### Supported tags
---`
local tags = {
  "a",  "abbr",  "address",  "area",  "article",
  "aside",  "audio",  "b",  "base",  "bdi",
  "bdo",  "blockquote",  "body",  "br",  "button",
  "canvas",  "caption",  "cite",  "code",  "col",
  "colgroup",  "data",  "datalist",  "dd",  "del",
  "details",  "dfn",  "dialog",  "div",  "dl",
  "dt",  "em",  "embed",  "fieldset",  "figcaption",
  "figure",  "footer",  "form",  "h1",  "h2",
  "h3",  "h4",  "h5",  "h6",  "head",
  "header",  "hr",  "html",  "i",  "iframe",
  "img",  "input",  "ins",  "kbd",  "label",
  "legend",  "li",  "link",  "main",  "map",
  "mark",  "meta",  "meter",  "nav",  "noscript",
  "object",  "ol",  "optgroup",  "option",  "output",
  "p",  "picture",  "pre",  "progress",  "q",
  "rp",  "rt",  "ruby",  "s",  "samp",
  "script",  "section",  "select",  "small",  "source",
  "span",  "strong",  "style",  "sub",  "summary",
  "sup",  "table",  "tbody",  "td",  "template",
  "textarea",  "tfoot",  "th",  "thead",  "time",
  "title",  "tr",  "track",  "u",  "ul",
  "var",  "video",  "wbr",
}
---`
]]

--- If a tag is marked as self closing, the `body` will be ignored
---`
local self_closing = inline_map!(string, boolean, {
  area = true,
  br = true,
  col = true,
  embed = true,
  hr = true,
  img = true,
  input = true,
  link = true,
  meta = true,
  param = true,
  source = true,
  track = true,
  wbr = true,
})
---`

--- ### html.Ctx:el
--[[-
Function to append a html tag to the [Ctx](#htmlctx) buffer
- `name`: The name of the element tag
- `attrs`: A hashmap that will be formatted as tag attributes
- `body`: Either a function or string, if it is a string, it is escaped and added to the buffer else it is ran
- `data`: This is passed as the `data` argument to `body` when it is a function
-]]
---`
function html.Ctx:el(
  name: string,
  attrs: facultative(hashmap(string, string)),
  body: overload(string, function(self: *html.Ctx, data: pointer), niltype),
  data: pointer
): *html.Ctx
---`
  self.buf:writef("<%s", name)
  ## if attrs.type.is_hashmap then
    for k, v in pairs(attrs) do
      if v == "" then
        self.buf:writef(' %s', k)
      else
        self.buf:writef(' %s="%s"', k, v)
      end
    end
  ## end
  if self_closing:has(name) then
    self.buf:write(" />")
  else
    self.buf:write(">")
    ## if body.type.is_string then
      if body:match("^__raw__:.*$") then
        self.buf:write(body:sub(#("__raw__:") + 1))
      else
        self.buf:write(html.escape(body))
      end
    ## elseif body.type.is_function then
      body(self, data)
    ## end
    self.buf:writef("</%s>", name)
  end
  return self
end

--- ### html.Ctx:#|tag|#
--[[-
Functions for different html elements based on the supported [tags](#supported-tags)
Built off of [Ctx:el](#htmlctxel)
-]]
## for _, tag in ipairs(tags) do
---`
function html.Ctx:#|tag|#(
  attrs: facultative(hashmap(string, string)),
  body: overload(string, function(self: *html.Ctx, data: pointer), niltype),
  data: pointer
): *html.Ctx
---`
  return self:el(#[tag]#, attrs, body, data)
end
## end

--- ### html.Ctx:text
--- Escapes `s` and appends it to the [Ctx](#htmlctx) buffer
---`
function html.Ctx:text(s: string): void
---`
  self.buf:write(html.escape(s))
end

--- ### html.Ctx:raw
--- Appends `s` as is to the [Ctx](#htmlctx) buffer
---`
function html.Ctx:raw(s: string): void
---`
  self.buf:write(s)
end

--- ### html.Ctx:tostring
--- Returns the content of the [Ctx](#htmlctx) buffer and clears it
---`
function html.Ctx:tostring(): string
---`
  return self.buf:promote()
end

--- ### html.Ctx:tostring
--- Destroys the [Ctx](#htmlctx) buffer
---`
function html.Ctx:destroy()
---`
  self.buf:destroy()
end

return html
