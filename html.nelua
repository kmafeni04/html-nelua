require "string"

local html = @record{}

local chars_to_escape: hashmap(string, string) 
chars_to_escape["&"] = "&amp;"
chars_to_escape["<"] = "&lt;"
chars_to_escape[">"] = "&gt;"
chars_to_escape['"'] = "&quot;"
chars_to_escape["'"] = "&#039;"

function html.escape(s: string): string
  s = s:gsub([=[[&<>"']]=], chars_to_escape)
  return s
end

function html.raw(s: string): string
  assert(s ~= "", "Param `s` can not be an empty string")
  return "__raw__:" .. s
end

local html.Attr = @record{
  name: string,
  value: string
}

local Ctx = @record{
  buf: stringbuilder,
}

##[[
local tags = {
  "a",  "abbr",  "address",  "area",  "article",
  "aside",  "audio",  "b",  "base",  "bdi",
  "bdo",  "blockquote",  "body",  "br",  "button",
  "canvas",  "caption",  "cite",  "code",  "col",
  "colgroup",  "data",  "datalist",  "dd",  "del",
  "details",  "dfn",  "dialog",  "div",  "dl",
  "dt",  "em",  "embed",  "fieldset",  "figcaption",
  "figure",  "footer",  "form",  "h1",  "h2",
  "h3",  "h4",  "h5",  "h6",  "head",
  "header",  "hr",  "html",  "i",  "iframe",
  "img",  "input",  "ins",  "kbd",  "label",
  "legend",  "li",  "link",  "main",  "map",
  "mark",  "meta",  "meter",  "nav",  "noscript",
  "object",  "ol",  "optgroup",  "option",  "output",
  "p",  "picture",  "pre",  "progress",  "q",
  "rp",  "rt",  "ruby",  "s",  "samp",
  "script",  "section",  "select",  "small",  "source",
  "span",  "strong",  "style",  "sub",  "summary",
  "sup",  "table",  "tbody",  "td",  "template",
  "textarea",  "tfoot",  "th",  "thead",  "time",
  "title",  "tr",  "track",  "u",  "ul",
  "var",  "video",  "wbr",
}
]]

local self_closing: hashmap(string, boolean)
self_closing["area"] = true
self_closing["br"] = true
self_closing["col"] = true
self_closing["embed"] = true
self_closing["hr"] = true
self_closing["img"] = true
self_closing["input"] = true
self_closing["link"] = true
self_closing["meta"] = true
self_closing["param"] = true
self_closing["source"] = true
self_closing["track"] = true
self_closing["wbr"] = true

function Ctx:el(name: string, data: pointer, attrs: sequence(html.Attr), body: overload(string, function(pointer), niltype)): void
  assert(name ~= "")
  self.buf:writef("<%s", name)
  if #attrs > 0 then
    for _, v in ipairs(attrs) do
      assert(v.name ~= "")
      if v.value == "" then
        self.buf:writef(' %s', v.name)
      else
        self.buf:writef(' %s="%s"', v.name, v.value)
      end
    end
  end
  if self_closing:has(name) then
    self.buf:write(" />")
  else
    self.buf:write(">")
    ## if body.type.is_string then
      if body:match("^__raw__:.*$") then
        self.buf:write(body:sub(#("__raw__:") + 1))
      else
        self.buf:write(html.escape(body))
      end
    ## elseif body.type.is_function then
      body(data)
    ## end
    self.buf:writef("</%s>", name)
  end
end

## for _, v in ipairs(tags) do
  function Ctx:#|v|#(data: pointer, attrs: sequence(html.Attr), body: overload(string, function(pointer), niltype)): void
    self:el(#[v]#, data, attrs, body)
  end
## end

function Ctx:text(s: string): void
  assert(s ~= "", "Param `s` can not be an empty string")
  self.buf:write(html.escape(s))
end

function Ctx:raw(s: string): void
  assert(s ~= "", "Param `s` can not be an empty string")
  self.buf:write(html.raw(s))
end

function Ctx:render(): string
  return self.buf:promote()
end

function Ctx:destroy()
  self.buf:destroy()
end

local html.Ctx = Ctx

return html
